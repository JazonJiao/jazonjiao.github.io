D5P223-190624
While doing data analysis, I have unexpectedly run into some data structures practice. Once, I found out that within the continuous data, there is a point of discontinuity: in a year, there are readings every day from 2/3 to 3/29, but then the next timestamp was in August, and I needed to find out in which row the data broke.
Since the data has millions of rows and I can only access a few hundred rows at a time, I needed to apply search methods. Of course, at the time I solved it using brute force, but I imagined what I would do if, say, there are many such discontinuities in the data and I need to find all of them.
Another time, I needed to “invert a mapping”. For example, if a 2D array A = [[0, 1], [3], [0, 2]], then the output should be B = [[0, 2], [0], [2], [1]]. Here A[0] maps to 0 and 1, so B[0] and B[1] should map back to 0, etc.
Yet another time, I need to re-index a sorted array, say changing [0, 1, 4, 4, 4, 6, 6, 8] to [0, 1, 2, 2, 2, 3, 3, 4]. This sounds like a simple problem, but I only did it right on the second try.
I have heard people complain about the CS career game on reddit: even when you’re applying for a specific technical task, you’re still asked general data structures and algorithms questions in an interview. I think data structures problems can come up regardless of one’s specific role, whereas those technical skills are always easy to learn once you are smart enough.
On 6/24 night, as I was stuck in Leetcode Prob. 721 for more than 2 hours and failed 7 submissions, I am inspired to reflect on the types of situations that can occur when I solve a problem.
When the problem is so easy that I can solve it in under 2 minutes, I don’t need to write drafts or pseudocode and can jump right in. For some Medium and many Hard problems, usually I can come up with a basic idea of how to solve it, but when implementing it, I need to care about a lot of details and nuances or subproblems, and the complexity makes it impossible to articulate what’s going on inside my brain or explain the decisions I make in the code.
What’s usually the case, especially for array problems (e.g. Prob. 135, 321, 487, 947), is that after an hour, I would get a skeleton written down, and then I’d debug it with the help of IDE (it’s impossible to debug by hand since the code is long). For some Hard string problems, I can quickly come up with a correct backtracking exponential solution, and then stuck with getting a polynomial-time solution.
After another several hours of effort, I will get most inputs working well, but still won’t be able to handle some tricky edge conditions, and have to give up. In the process, I might have rewritten the method with an entirely different approach; if I was only improving on the original approach, the logic can get more and more convoluted, and it becomes nearly impossible to track down where things go wrong.
Indeed, those Hard problems are unlikely to occur in real interviews. If it does, I can: (1) understand the problem and make observations; (2) solve a weaker version of the problem; (3) solve it via brute-force; (4) discuss potential ways to solve it.
On 6/25, 698 told me that the Facebook recruiter for Vanderbilt has contacted her for an August interview for 2020 summer internship. She didn’t know this recruiter, and said that she was contacted maybe because of her activeness on LinkedIn. So if she can get an interview offer, why can’t I? I just need to utilize LinkedIn a bit more.
I plan to update my profile and post about my research and Manim.js at the end of my research after the 7/16 GRE test. There is a free LinkedIn tutorial on Vandy’s career center website, and I’ll finish it by then. Hopefully it won’t be a bit too late by then.
The fact that she immediately thought of me when she received the recruiter message reminds me of my hard-earned status as a xueba in Vandy CS, just like I first thought of 983 when I received the Google email. A bad thing about graduating in 3 years is that I will spend much less time enjoying the benefits brought by this status in my current friend circle.
Way back in D5P13-170105 (which feels like another life in another world), I once reflected on why other didn’t think of me when there were opportunities. In 2 years, I finally realized the reason was not because I was introverted, but that I wasn’t smart enough.
After immersing in learning history for almost 10 days and watching 67 episodes of Chu & Han, I have been feeling a surge of motivation to shuati. Since 5/10, my shuati progress stayed fast for 4 weeks—in the 1st week of research I was spending almost all of my evening time on Leetcode—and then stagnated for about 2 weeks after Google’s coding assessment. Indeed, I cannot expect my progress to be always fast; the cycle of motivation in GR2 applies here too.
As I said last year this time, Chu & Han has been very inspiring for interpersonal relationships, personal life paths, politics, and even, subtly, shuati. It’s effect on my character is imperceptible and not expressible, but real.
For the past 7 weeks, I’ve never had any audio input when learning data structures, i.e. I never listened to any lectures. I’ve read blog posts, Leetcode solutions and discussions, and most importantly, the CS-2201 textbook. I find it well written since it teaches me how to develop a solution step by step. The first draft will be very simple and high-level, maybe even incorrect, but that’s what they are for!
This principle of focusing on the big picture first and then improving gradually is really useful in (not all but) many Medium+ problems that require some exploration to find a solution.
