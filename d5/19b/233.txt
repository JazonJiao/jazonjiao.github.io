D5P233-190819
31`On 8/17 I flew back to the US from Nanjing via LAX and NYC. I arrived at 8/18 morning but school starts Wed, 8/21 (I thought it was Mon, 8/19 when booking the flight…) Whereas I forgot my pencil case last winter, this time I forgot to bring my laptop charger, but luckily 133 sets out on 8/19 so he could bring it for me.
31`In LAX I met 210; he took a few seconds to recall my name, but I couldn’t remember anything about his name until I stared at his immigration card for several seconds. He took the Gaokao and entered NJUST (nanligong), and is on exchange to ASU (where the temperature is reaching 46 °C!)
24`He talked about other 4 Gaokaoers in Class 2: 230 only got into NJUPT (nanyou) along with 234, and 233 missed Southeast to go to NUAA, while 229 went to BJUST.
32`When I arrived, the high in Nashville is 37 and Nanjing has cooled to 32. At nights it’s no cooler because of the high humidity. When hungry and/or sleepy, I’m still vulnerable under the heat. Again, I generally don’t like the food on campus—except for my life saver, 2301 sauté and Mongolian Grill!
31`On 8/19 I opened YouTube after more than 3 months of losing interest in it. (On 8/19 my YouTube subscriber number exceeded 1,000. Hooray!) Watching 3b1b, Vsauce, and Kurzgesagt is quite a different mode of learning/entertaining than what I could do without YouTube (such as watching Chinese TV series)!
12`As an effort to improve my interview skills, I watched many interviewing.io videos, which are extremely helpful. As mentioned before, it’s crucial to get audio input. I learn a lot of communication skills including common phrases like “the first approach that came to my mind is...” “nothing is clicking in my head now…” Without these expressions, I might have trouble starting my sentences.
12`I also get to experience various styles of questions and interviewers. Some people jump right into coding and don’t speak much during coding. Some people start from the brute force, then explain the improved algorithm, and then confirm with the interviewer that this is the right direction, and then write an outline of the algorithm in comments, before doing the actual coding. Of course, if the problem is hard, coding without talking is the only choice; as mentioned before it’s harder to explain the thought process.
12`But most problems that are asked aren’t super hard, and the solution is sometimes just a few lines. Even if Hard question are asked (LC 269, Alien Dictionary), the interviewer will state that this is a graph problem and guide you through the breakdown of the algorithm.
12`When people solve the problem quickly, the interviewer will come up with various questions such as analyzing time/space complexity or edge cases (although sometimes the interviewee will have done these analyses while developing the algorithm).
12`Also, the interviewees all use pretty good but complicated variable names, while when I practiced, I just used single-letter names or things like “ans,” “arr,” “res,” without much description of what these variables actually do.
12`The great thing about interviewing.io is that they post the hire-reject decisions and feedback for each interviewee. The evaluation is divided into coding skills, problem solving skills, and communication skills.
12`Previously I tended to think very deeply about hard problems and advanced algorithms. Watching these videos can improve my communication skills, which is important in case the interviewer asks simpler problems. However, they interrupt my depth of thought about the deeper connections between the problems and methods, which as I mentioned can only be achieved when I’m quiet.
13`As the Math 3620 professor said on 8/21, understanding a concept is a non-linear process; it’s more like a step function. At first you don’t understand it, and then suddenly everything began to click. This is repeatedly the case in the last semester and also when I try understand algorithms now: the optimal algorithm for longest valid parenthesis, palindrome pairs, regex matching…
13`In the summer break, I attempted 270 LC problems, solving 257. I spent an estimated 300 hours preparing for interview problems (excluding other aspects of job search); this implies that for each Leetcode problem I solve, I add about 1 hour to my progress. Now, I spend an average of less than 1 hour solving one problem, but compared to before, I spend more time using non-Leetcode resources or reviewing previously done problems.
